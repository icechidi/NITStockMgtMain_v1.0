PostgreSQL Codes Setting up the Table:
-- Create items table
CREATE TABLE items (
    id SERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    description TEXT,
    quantity INTEGER NOT NULL DEFAULT 0,
    unit_price DECIMAL(10,2) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Create stock_movements table
CREATE TABLE stock_movements (
    id SERIAL PRIMARY KEY,
    item_id INTEGER REFERENCES items(id),
    movement_type VARCHAR(3) NOT NULL CHECK (movement_type IN ('IN', 'OUT')),
    quantity INTEGER NOT NULL,
    movement_date TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    notes TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Create trigger function
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = CURRENT_TIMESTAMP;
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Create trigger
CREATE TRIGGER update_items_updated_at
    BEFORE UPDATE ON items
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();



Implementing the Dates and Updating the Tables:
-- Add date column to items table
ALTER TABLE items 
ADD COLUMN entry_date DATE DEFAULT CURRENT_DATE;

-- Add date column to stock_movements table if movement_date isn't sufficient
ALTER TABLE stock_movements 
ADD COLUMN transaction_date DATE DEFAULT CURRENT_DATE;

-- Update existing records to have a date
UPDATE items 
SET entry_date = created_at::DATE 
WHERE entry_date IS NULL;

UPDATE stock_movements 
SET transaction_date = movement_date::DATE 
WHERE transaction_date IS NULL;